/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db;


import jooq.steve.db.tables.Address;
import jooq.steve.db.tables.ChargeBox;
import jooq.steve.db.tables.ChargingProfile;
import jooq.steve.db.tables.ChargingSchedulePeriod;
import jooq.steve.db.tables.Connector;
import jooq.steve.db.tables.ConnectorChargingProfile;
import jooq.steve.db.tables.ConnectorMeterValue;
import jooq.steve.db.tables.ConnectorStatus;
import jooq.steve.db.tables.OcppTag;
import jooq.steve.db.tables.Reservation;
import jooq.steve.db.tables.SchemaVersion;
import jooq.steve.db.tables.Settings;
import jooq.steve.db.tables.TransactionStart;
import jooq.steve.db.tables.TransactionStop;
import jooq.steve.db.tables.Users;
import jooq.steve.db.tables.records.AddressRecord;
import jooq.steve.db.tables.records.ChargeBoxRecord;
import jooq.steve.db.tables.records.ChargingProfileRecord;
import jooq.steve.db.tables.records.ChargingSchedulePeriodRecord;
import jooq.steve.db.tables.records.ConnectorChargingProfileRecord;
import jooq.steve.db.tables.records.ConnectorMeterValueRecord;
import jooq.steve.db.tables.records.ConnectorRecord;
import jooq.steve.db.tables.records.ConnectorStatusRecord;
import jooq.steve.db.tables.records.OcppTagRecord;
import jooq.steve.db.tables.records.ReservationRecord;
import jooq.steve.db.tables.records.SchemaVersionRecord;
import jooq.steve.db.tables.records.SettingsRecord;
import jooq.steve.db.tables.records.TransactionStartRecord;
import jooq.steve.db.tables.records.TransactionStopRecord;
import jooq.steve.db.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * stevedb.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ADDRESS_PK }, true);
    public static final UniqueKey<ChargeBoxRecord> CHARGE_BOX_PKEY = Internal.createUniqueKey(ChargeBox.CHARGE_BOX, DSL.name("charge_box_pkey"), new TableField[] { ChargeBox.CHARGE_BOX.CHARGE_BOX_PK }, true);
    public static final UniqueKey<ChargeBoxRecord> CHARGEBOX_PKEY = Internal.createUniqueKey(ChargeBox.CHARGE_BOX, DSL.name("chargebox_pkey"), new TableField[] { ChargeBox.CHARGE_BOX.CHARGE_BOX_ID }, true);
    public static final UniqueKey<ChargingProfileRecord> CHARGING_PROFILE_PKEY = Internal.createUniqueKey(ChargingProfile.CHARGING_PROFILE, DSL.name("charging_profile_pkey"), new TableField[] { ChargingProfile.CHARGING_PROFILE.CHARGING_PROFILE_PK }, true);
    public static final UniqueKey<ChargingSchedulePeriodRecord> UQ_CHARGING_SCHEDULE_PERIOD = Internal.createUniqueKey(ChargingSchedulePeriod.CHARGING_SCHEDULE_PERIOD, DSL.name("uq_charging_schedule_period"), new TableField[] { ChargingSchedulePeriod.CHARGING_SCHEDULE_PERIOD.CHARGING_PROFILE_PK, ChargingSchedulePeriod.CHARGING_SCHEDULE_PERIOD.START_PERIOD_IN_SECONDS }, true);
    public static final UniqueKey<ConnectorRecord> CONNECTOR_CHARGEBOXID_CONNECTORID_KEY = Internal.createUniqueKey(Connector.CONNECTOR, DSL.name("connector_chargeboxid_connectorid_key"), new TableField[] { Connector.CONNECTOR.CHARGE_BOX_ID, Connector.CONNECTOR.CONNECTOR_ID }, true);
    public static final UniqueKey<ConnectorRecord> CONNECTOR_PKEY = Internal.createUniqueKey(Connector.CONNECTOR, DSL.name("connector_pkey"), new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final UniqueKey<ConnectorChargingProfileRecord> UQ_CONNECTOR_CHARGING_PROFILE = Internal.createUniqueKey(ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE, DSL.name("uq_connector_charging_profile"), new TableField[] { ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE.CONNECTOR_PK, ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE.CHARGING_PROFILE_PK }, true);
    public static final UniqueKey<ConnectorStatusRecord> CONNECTOR_STATUS_PKEY = Internal.createUniqueKey(ConnectorStatus.CONNECTOR_STATUS, DSL.name("connector_status_pkey"), new TableField[] { ConnectorStatus.CONNECTOR_STATUS.CONNECTOR_PK }, true);
    public static final UniqueKey<OcppTagRecord> USER_PKEY = Internal.createUniqueKey(OcppTag.OCPP_TAG, DSL.name("user_pkey"), new TableField[] { OcppTag.OCPP_TAG.ID_TAG }, true);
    public static final UniqueKey<OcppTagRecord> USERS_PKEY = Internal.createUniqueKey(OcppTag.OCPP_TAG, DSL.name("users_pkey"), new TableField[] { OcppTag.OCPP_TAG.OCPP_TAG_PK }, true);
    public static final UniqueKey<ReservationRecord> RESERVATION_PKEY = Internal.createUniqueKey(Reservation.RESERVATION, DSL.name("reservation_pkey"), new TableField[] { Reservation.RESERVATION.RESERVATION_PK }, true);
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = Internal.createUniqueKey(SchemaVersion.SCHEMA_VERSION, DSL.name("schema_version_pk"), new TableField[] { SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK }, true);
    public static final UniqueKey<SettingsRecord> SETTINGS_PKEY = Internal.createUniqueKey(Settings.SETTINGS, DSL.name("settings_pkey"), new TableField[] { Settings.SETTINGS.APP_ID }, true);
    public static final UniqueKey<TransactionStartRecord> TRANSACTION_PKEY = Internal.createUniqueKey(TransactionStart.TRANSACTION_START, DSL.name("transaction_pkey"), new TableField[] { TransactionStart.TRANSACTION_START.TRANSACTION_PK }, true);
    public static final UniqueKey<TransactionStopRecord> TRANSACTION_STOP_PKEY = Internal.createUniqueKey(TransactionStop.TRANSACTION_STOP, DSL.name("transaction_stop_pkey"), new TableField[] { TransactionStop.TRANSACTION_STOP.TRANSACTION_PK, TransactionStop.TRANSACTION_STOP.EVENT_TIMESTAMP }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY1 = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey1"), new TableField[] { Users.USERS.USER_PK }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ChargeBoxRecord, AddressRecord> CHARGE_BOX__FK_CHARGE_BOX_ADDRESS_APK = Internal.createForeignKey(ChargeBox.CHARGE_BOX, DSL.name("fk_charge_box_address_apk"), new TableField[] { ChargeBox.CHARGE_BOX.ADDRESS_PK }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ADDRESS_PK }, true);
    public static final ForeignKey<ChargingSchedulePeriodRecord, ChargingProfileRecord> CHARGING_SCHEDULE_PERIOD__FK_CHARGING_SCHEDULE_PERIOD_CHARGING_PROFILE_PK = Internal.createForeignKey(ChargingSchedulePeriod.CHARGING_SCHEDULE_PERIOD, DSL.name("fk_charging_schedule_period_charging_profile_pk"), new TableField[] { ChargingSchedulePeriod.CHARGING_SCHEDULE_PERIOD.CHARGING_PROFILE_PK }, Keys.CHARGING_PROFILE_PKEY, new TableField[] { ChargingProfile.CHARGING_PROFILE.CHARGING_PROFILE_PK }, true);
    public static final ForeignKey<ConnectorRecord, ChargeBoxRecord> CONNECTOR__FK_CONNECTOR_CHARGE_BOX_CBID = Internal.createForeignKey(Connector.CONNECTOR, DSL.name("fk_connector_charge_box_cbid"), new TableField[] { Connector.CONNECTOR.CHARGE_BOX_ID }, Keys.CHARGEBOX_PKEY, new TableField[] { ChargeBox.CHARGE_BOX.CHARGE_BOX_ID }, true);
    public static final ForeignKey<ConnectorChargingProfileRecord, ChargingProfileRecord> CONNECTOR_CHARGING_PROFILE__FK_CONNECTOR_CHARGING_PROFILE_CHARGING_PROFILE_PK = Internal.createForeignKey(ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE, DSL.name("fk_connector_charging_profile_charging_profile_pk"), new TableField[] { ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE.CHARGING_PROFILE_PK }, Keys.CHARGING_PROFILE_PKEY, new TableField[] { ChargingProfile.CHARGING_PROFILE.CHARGING_PROFILE_PK }, true);
    public static final ForeignKey<ConnectorChargingProfileRecord, ConnectorRecord> CONNECTOR_CHARGING_PROFILE__FK_CONNECTOR_CHARGING_PROFILE_CONNECTOR_PK = Internal.createForeignKey(ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE, DSL.name("fk_connector_charging_profile_connector_pk"), new TableField[] { ConnectorChargingProfile.CONNECTOR_CHARGING_PROFILE.CONNECTOR_PK }, Keys.CONNECTOR_PKEY, new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final ForeignKey<ConnectorMeterValueRecord, ConnectorRecord> CONNECTOR_METER_VALUE__FK_PK_CM = Internal.createForeignKey(ConnectorMeterValue.CONNECTOR_METER_VALUE, DSL.name("fk_pk_cm"), new TableField[] { ConnectorMeterValue.CONNECTOR_METER_VALUE.CONNECTOR_PK }, Keys.CONNECTOR_PKEY, new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final ForeignKey<ConnectorMeterValueRecord, TransactionStartRecord> CONNECTOR_METER_VALUE__FK_TID_CM = Internal.createForeignKey(ConnectorMeterValue.CONNECTOR_METER_VALUE, DSL.name("fk_tid_cm"), new TableField[] { ConnectorMeterValue.CONNECTOR_METER_VALUE.TRANSACTION_PK }, Keys.TRANSACTION_PKEY, new TableField[] { TransactionStart.TRANSACTION_START.TRANSACTION_PK }, true);
    public static final ForeignKey<ConnectorStatusRecord, ConnectorRecord> CONNECTOR_STATUS__FK_CS_PK = Internal.createForeignKey(ConnectorStatus.CONNECTOR_STATUS, DSL.name("fk_cs_pk"), new TableField[] { ConnectorStatus.CONNECTOR_STATUS.CONNECTOR_PK }, Keys.CONNECTOR_PKEY, new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final ForeignKey<OcppTagRecord, OcppTagRecord> OCPP_TAG__FK_OCPP_TAG_PARENT_ID_TAG = Internal.createForeignKey(OcppTag.OCPP_TAG, DSL.name("fk_ocpp_tag_parent_id_tag"), new TableField[] { OcppTag.OCPP_TAG.PARENT_ID_TAG }, Keys.USER_PKEY, new TableField[] { OcppTag.OCPP_TAG.ID_TAG }, true);
    public static final ForeignKey<ReservationRecord, ConnectorRecord> RESERVATION__FK_CONNECTOR_PK_RESERV = Internal.createForeignKey(Reservation.RESERVATION, DSL.name("fk_connector_pk_reserv"), new TableField[] { Reservation.RESERVATION.CONNECTOR_PK }, Keys.CONNECTOR_PKEY, new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final ForeignKey<ReservationRecord, OcppTagRecord> RESERVATION__FK_RESERVATION_OCPP_TAG_ID_TAG = Internal.createForeignKey(Reservation.RESERVATION, DSL.name("fk_reservation_ocpp_tag_id_tag"), new TableField[] { Reservation.RESERVATION.ID_TAG }, Keys.USER_PKEY, new TableField[] { OcppTag.OCPP_TAG.ID_TAG }, true);
    public static final ForeignKey<ReservationRecord, TransactionStartRecord> RESERVATION__FK_TRANSACTION_PK_R = Internal.createForeignKey(Reservation.RESERVATION, DSL.name("fk_transaction_pk_r"), new TableField[] { Reservation.RESERVATION.TRANSACTION_PK }, Keys.TRANSACTION_PKEY, new TableField[] { TransactionStart.TRANSACTION_START.TRANSACTION_PK }, true);
    public static final ForeignKey<TransactionStartRecord, ConnectorRecord> TRANSACTION_START__FK_CONNECTOR_PK_T = Internal.createForeignKey(TransactionStart.TRANSACTION_START, DSL.name("fk_connector_pk_t"), new TableField[] { TransactionStart.TRANSACTION_START.CONNECTOR_PK }, Keys.CONNECTOR_PKEY, new TableField[] { Connector.CONNECTOR.CONNECTOR_PK }, true);
    public static final ForeignKey<TransactionStartRecord, OcppTagRecord> TRANSACTION_START__FK_TRANSACTION_OCPP_TAG_ID_TAG = Internal.createForeignKey(TransactionStart.TRANSACTION_START, DSL.name("fk_transaction_ocpp_tag_id_tag"), new TableField[] { TransactionStart.TRANSACTION_START.ID_TAG }, Keys.USER_PKEY, new TableField[] { OcppTag.OCPP_TAG.ID_TAG }, true);
    public static final ForeignKey<TransactionStopRecord, TransactionStartRecord> TRANSACTION_STOP__FK_TRANSACTION_STOP_TRANSACTION_PK = Internal.createForeignKey(TransactionStop.TRANSACTION_STOP, DSL.name("fk_transaction_stop_transaction_pk"), new TableField[] { TransactionStop.TRANSACTION_STOP.TRANSACTION_PK }, Keys.TRANSACTION_PKEY, new TableField[] { TransactionStart.TRANSACTION_START.TRANSACTION_PK }, true);
    public static final ForeignKey<UsersRecord, AddressRecord> USERS__FK_USER_ADDRESS_APK = Internal.createForeignKey(Users.USERS, DSL.name("fk_user_address_apk"), new TableField[] { Users.USERS.ADDRESS_PK }, Keys.ADDRESS_PKEY, new TableField[] { Address.ADDRESS.ADDRESS_PK }, true);
    public static final ForeignKey<UsersRecord, OcppTagRecord> USERS__FK_USER_OCPP_TAG_OTPK = Internal.createForeignKey(Users.USERS, DSL.name("fk_user_ocpp_tag_otpk"), new TableField[] { Users.USERS.OCPP_TAG_PK }, Keys.USERS_PKEY, new TableField[] { OcppTag.OCPP_TAG.OCPP_TAG_PK }, true);
}
