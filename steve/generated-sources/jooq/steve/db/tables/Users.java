/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables;


import de.rwth.idsg.steve.utils.DateConverter;

import java.util.Arrays;
import java.util.List;

import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.UsersRecord;

import org.joda.time.LocalDate;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stevedb.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>stevedb.users.user_pk</code>.
     */
    public final TableField<UsersRecord, Integer> USER_PK = createField(DSL.name("user_pk"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('stevedb.users_user_pk_seq1'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stevedb.users.ocpp_tag_pk</code>.
     */
    public final TableField<UsersRecord, Integer> OCPP_TAG_PK = createField(DSL.name("ocpp_tag_pk"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stevedb.users.address_pk</code>.
     */
    public final TableField<UsersRecord, Integer> ADDRESS_PK = createField(DSL.name("address_pk"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stevedb.users.first_name</code>.
     */
    public final TableField<UsersRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.users.last_name</code>.
     */
    public final TableField<UsersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.users.birth_day</code>.
     */
    public final TableField<UsersRecord, LocalDate> BIRTH_DAY = createField(DSL.name("birth_day"), SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>stevedb.users.sex</code>.
     */
    public final TableField<UsersRecord, String> SEX = createField(DSL.name("sex"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>stevedb.users.phone</code>.
     */
    public final TableField<UsersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.users.e_mail</code>.
     */
    public final TableField<UsersRecord, String> E_MAIL = createField(DSL.name("e_mail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.users.note</code>.
     */
    public final TableField<UsersRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stevedb.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>stevedb.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>stevedb.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stevedb.STEVEDB;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY1;
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS__FK_USER_OCPP_TAG_OTPK, Keys.USERS__FK_USER_ADDRESS_APK);
    }

    private transient OcppTag _ocppTag;
    private transient Address _address;

    /**
     * Get the implicit join path to the <code>stevedb.ocpp_tag</code> table.
     */
    public OcppTag ocppTag() {
        if (_ocppTag == null)
            _ocppTag = new OcppTag(this, Keys.USERS__FK_USER_OCPP_TAG_OTPK);

        return _ocppTag;
    }

    /**
     * Get the implicit join path to the <code>stevedb.address</code> table.
     */
    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.USERS__FK_USER_ADDRESS_APK);

        return _address;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, String, String, LocalDate, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
